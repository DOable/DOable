<?php

/**
 * @file
 * Tests for Visitor Actions module.
 */

class VisitorActionsTest extends DrupalWebTestCase {

  protected $adminUser;

  public static function getInfo() {
    return array(
      'name' => t('Visitor Actions Tests'),
      'description' => t('Tests basic functionality of Visitor Actions module.'),
      'group' => t('Visitor Actions'),
    );
  }

  function setUp() {
    parent::setUp(array('visitor_actions_test'));
    // Create and login user
    $this->adminUser = $this->drupalCreateUser(array('access administration pages', 'administer visitor actions'));
  }

  /**
   * Tests that actions defined in hook_visitor_actions_info are loaded.
   */
  public function testActionsLoad() {
    $actions = visitor_actions_get_actions();
    // Assert that an action defined using hook_visitor_actions_info() is loaded.
    $this->assertTrue(isset($actions['visitor_actions_test_form_click_test']));
    // Assert that an action defined in a default hook is loaded.
    $this->assertTrue(isset($actions['test_action']));
  }

  /**
   * Tests personalization behavior under multiple scenarios.
   */
  public function testActionSettings() {

    $this->drupalGet('node');
    $settings = $this->drupalGetSettings();
    $va_settings = $settings['visitor_actions'];
    // Check that the currentPath setting has been set
    $this->assertEqual('node', $va_settings['currentPath']);
    // On the home page we should only see settings for those client-side
    // actions that don't have pages specified, or specify the home page.
    $expected_actions = array(
      0 => 'scroll_to_bottom',
      1 => 'visitor_actions_test_form_click_test',
      2 => 'visitor_actions_test_form_hover_test',
      3 => 'visitor_actions_test_form_submit_client_side',
      4 => 'test_action'
    );
    $this->assertEqual($expected_actions, array_keys($va_settings['actions']));

    $this->drupalGet('user');
    $settings = $this->drupalGetSettings();
    $va_settings = $settings['visitor_actions'];
    // On the user page we should see the breadcrumb_link action as well, but not
    // the test_action action which should only exist on the home page.
    $expected_actions = array(
      0 => 'scroll_to_bottom',
      1 => 'visitor_actions_test_form_click_test',
      2 => 'visitor_actions_test_form_hover_test',
      3 => 'visitor_actions_test_form_breadcrumb_link',
      4 => 'visitor_actions_test_form_submit_client_side',
    );
    $this->assertEqual($expected_actions, array_keys($va_settings['actions']));
  }

  public function testActionCreationForm() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/structure/visitor_actions/add');
    // The dropdown for selecting the actionable element should exist.
    $this->assertFieldByName('actionable_element');

    $this->drupalGet('admin/structure/visitor_actions/add/link');
    // There should be no actionable_element dropdown.
    $this->assertNoFieldByName('actionable_element');
    $action_name = strtolower($this->randomName());
    $edit = array(
      'machine_name' => $action_name,
      'title' => $this->randomName(),
      'identifier[link]' => '.some-class',
      'event[link]' => 'client::click',
      'pages' => 'node',
    );
    $this->drupalPost('admin/structure/visitor_actions/add/link', $edit, t('Save'));
    // Now see if the new action shows up.
    $this->drupalGet('node');
    $settings = $this->drupalGetSettings();
    $va_settings = $settings['visitor_actions'];

    $this->assertTrue(in_array($action_name, array_keys($va_settings['actions'])));

    // Now edit the action and specify '<front>' as the path.
    $edit = array(
      'pages' => '<front>',
    );
    $this->drupalPost("admin/structure/visitor_actions/manage/$action_name/edit", $edit, t('Save'));
    $this->assertNoText('The selected pages must contain valid paths.');
    // Now edit the action and specify an invalid path.
    $edit = array(
      'pages' => 'some invalid url',
    );
    $this->drupalPost("admin/structure/visitor_actions/manage/$action_name/edit", $edit, t('Save'));
    $this->assertText('The selected pages must contain valid paths.');
  }

  public function testFormServerSideAction() {
    $this->drupalPost('visitor-actions-test/form-action', array('test' => 'Test'), t('Save'));
    $this->assertText('Test action "base_form" subscriber was fired!');
    $this->assertText('Test action "form_submit" subscriber was fired!');
    $this->assertText('Test action "form" subscriber was fired!');
  }
}
